version: '3.8'

services:
  # nnInteractive server
  nninteractive:
    image: nninteractive/server:latest
    container_name: nninteractive-server
    ports:
      - "1527:1527"
    environment:
      - CUDA_VISIBLE_DEVICES=0  # Adjust for your GPU setup
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1527/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - pet-segmentation-network

  # PET Segmentation service
  pet-segmentation:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pet-segmentation-app
    ports:
      - "8000:8000"
    environment:
      - NNINTERACTIVE_URL=http://nninteractive:1527
      - LOG_LEVEL=INFO
      - OUTPUT_DIR=/app/outputs
      - TEMP_DIR=/app/temp
      - MAX_WORKERS=4
      - BATCH_SIZE=5
    volumes:
      - ./data:/app/data:ro
      - ./outputs:/app/outputs
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      nninteractive:
        condition: service_healthy
    command: ["python", "-m", "pet_segmentation.api.server", "--host", "0.0.0.0", "--port", "8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - pet-segmentation-network

  # Redis for caching and job queues (optional)
  redis:
    image: redis:7-alpine
    container_name: pet-segmentation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pet-segmentation-network

  # PostgreSQL for metadata storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: pet-segmentation-db
    environment:
      - POSTGRES_DB=pet_segmentation
      - POSTGRES_USER=pet_user
      - POSTGRES_PASSWORD=pet_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pet_user -d pet_segmentation"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pet-segmentation-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pet-segmentation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - pet-segmentation-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: pet-segmentation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - pet-segmentation-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: pet-segmentation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - pet-segmentation
    restart: unless-stopped
    networks:
      - pet-segmentation-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  pet-segmentation-network:
    driver: bridge 